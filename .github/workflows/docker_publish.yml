# Rewrite from Multi-platform image | Docker Docs
# https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
name: docker_publish

on:
  push:
    branches:
      - "master"
    tags:
      - "v*"
  schedule:
    - cron: "0 5 1 * *"  # 1st day of month at 5am UTC
  workflow_dispatch:

permissions:
  id-token: write
  attestations: write
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: ${{ github.repository_owner }}/standalone-civitai-shortcut

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Prepare Dockerfile for CI (remove ,Z and ,z)
        run: |
          sed -i 's/,Z//g;s/,z//g' Dockerfile
        shell: bash

      - name: Prepare platform variables
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-setup-steps
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
          tag: ${{ github.ref_name }}
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: final
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.setup.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
            RELEASE=${{ github.run_number }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-${{ env.PLATFORM_PAIR }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-${{ env.PLATFORM_PAIR }},mode=max
          sbom: true
          provenance: true
          outputs: |
            type=image,name=ghcr.io/${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "${digest#sha256:}" > /tmp/digests/${{ env.PLATFORM_PAIR }}

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-setup-steps
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
          tag: ${{ github.ref_name }}
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Skopeo
        run: |
          echo "Installing skopeo..."
          # Get the latest version
          SKOPEO_VERSION=$(curl -s https://raw.githubusercontent.com/lework/skopeo-binary/master/version.txt | tail -n1)
          echo "Installing skopeo version: $SKOPEO_VERSION"
          
          # Download skopeo binary
          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          case $ARCH in
            x86_64) ARCH="amd64" ;;
            aarch64) ARCH="arm64" ;;
          esac
          
          DOWNLOAD_URL="https://github.com/lework/skopeo-binary/releases/download/${SKOPEO_VERSION}/skopeo-${PLATFORM}-${ARCH}"
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download and install
          curl -L "$DOWNLOAD_URL" -o /tmp/skopeo
          chmod +x /tmp/skopeo
          sudo mv /tmp/skopeo /usr/local/bin/skopeo
          
          # Verify installation
          echo "Skopeo installed successfully:"
          which skopeo
          skopeo --version

      - name: Create GHCR manifest list
        run: |
          echo "Creating manifest list for GHCR..."
          cd /tmp/digests
          echo "Files in /tmp/digests:"
          ls -la
          echo "Building digest references..."
          digest_refs=""
          for file in linux-*; do
            if [[ -f "$file" ]]; then
              digest=$(cat "$file")
              echo "Processing $file with digest: $digest"
              digest_refs+="ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:$digest "
            fi
          done
          echo "Final digest references: $digest_refs"
          docker buildx imagetools create \
            $(jq -cr '.tags | map(select(startswith("ghcr.io/")) | "-t " + .) | join(" ")' <<<$DOCKER_METADATA_OUTPUT_JSON) \
            $digest_refs

      - name: Copy to other registries using Skopeo
        run: |
          echo "Copying to Docker Hub and Quay.io using Skopeo..."
          
          # Ensure skopeo is available
          if ! command -v skopeo &> /dev/null; then
            echo "ERROR: skopeo command not found"
            exit 1
          fi
          
          echo "Using skopeo version: $(skopeo --version)"

          for tag in $(jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON); do
            # Copy to Docker Hub
            docker_hub_tag=$(echo "$tag" | sed 's|ghcr.io/${{ github.repository_owner }}|docker.io/${{ secrets.DOCKERHUB_USERNAME }}|')
            echo "Copying $tag -> $docker_hub_tag"
            skopeo copy --multi-arch all \
              --dest-creds ${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }} \
              docker://$tag \
              docker://$docker_hub_tag
          done

          for tag in $(jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON); do
            # Copy to Quay.io
            quay_tag=$(echo "$tag" | sed 's|ghcr.io/${{ github.repository_owner }}|quay.io/${{ github.repository_owner }}|')
            echo "Copying $tag -> $quay_tag"
            skopeo copy --multi-arch all \
              --dest-creds ${{ secrets.QUAY_USERNAME }}:${{ secrets.QUAY_TOKEN }} \
              docker://$tag \
              docker://$quay_tag
          done

      - name: Attest GHCR image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/standalone-civitai-shortcut
          subject-digest: ${{ needs.build.outputs.digest }}

      - name: Attest Docker Hub image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/${{ secrets.DOCKERHUB_USERNAME }}/standalone-civitai-shortcut
          subject-digest: ${{ needs.build.outputs.digest }}

      - name: Attest Quay image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: quay.io/${{ github.repository_owner }}/standalone-civitai-shortcut
          subject-digest: ${{ needs.build.outputs.digest }}
